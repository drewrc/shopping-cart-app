@page "/products"        // Sets the page route to /products
@using ShoppingCartApp.Client.Services     // Import the necessary namespaces
@inject ProductService ProductService
@using ShoppingCartApp.Shared
@using System.Linq
@inject ShoppingCartService ShoppingCartService
@using ShoppingCartApp.Client.Pages

<head>
    <link href="styles/checkout.css" rel="stylesheet" />    
</head>

<div class="row">
    <div class="col">
        <h3>Products</h3>
        <div class="row flex-column">
            @if (products == null)      // Check if the product data has been retrieved
            {
                <p>Loading products...</p>   // Display a message if the data is not available
            }
            else
            {
                @foreach (var product in products)     // Display the product data using a foreach loop
                {
                    <div class="col">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@product.Title</h5>  
                                <p class="card-text">SKU: @product.Sku</p>
                                <p class="card-text">Price: @product.Price</p>
                                <button class="btn btn-primary" @onclick="() => AddToCart(product)">Add to Cart</button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

    </div>
    <div class="col">
    <div > 
        <CheckOutForm />   
        <h3>Shopping Cart</h3>
        @if (ShoppingCartService.IsCartEmpty())     // Check if the cart is empty
        {
            <p>Your cart is empty.</p>   // Display a message if the cart is empty
        }
        else
        {
            <table class="table">   
                <thead>
                    <tr>
                        <th>SKU</th>
                        <th>Title</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ShoppingCartService.GetCartItems())    // Use a foreach loop to display each cart item
                    {
                        <tr>
                            <td>@item.Product.Sku</td>
                            <td>@item.Product.Title</td>
                            <td>@item.Product.Price</td>
                            <td>@item.Quantity</td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="row">
            <div class="col">Total: @ShoppingCartService.GetTotalPrice()</div> 
            </div>
        }
        </div>
    </div>
</div>
@code {
    private List<Product>? products;   // Declare a private field for storing the product data

    protected override async Task OnInitializedAsync()     // Retrieve the product data when the page is initialized
    {
        var products = await ProductService.GetProductsAsync();   // Call the ProductService to get the product data
        if (products != null)
        {
            this.products = products.ToList();    // Store the product data in the private field
        }
    }

    private void AddToCart(Product product)    // Add a product to the shopping cart when the "Add to Cart" button is clicked
    {
        ShoppingCartService.AddItemToCart(product, 1);   // Call the ShoppingCart
    }
}