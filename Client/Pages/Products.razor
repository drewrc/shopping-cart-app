@page "/products"
@using ShoppingCartApp.Client.Services
@inject ProductService ProductService
@using ShoppingCartApp.Shared
@using System.Linq
@inject ShoppingCartService ShoppingCartService
@using ShoppingCartApp.Client.Pages



<div class="row">
    <div class="col">
        <h3>Products</h3>
        <div class="row flex-column">
            @if (products == null)
            {
                <p>Loading products...</p>
            }
            else
            {
                @foreach (var product in products)
                {
                    <div class="col">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@product.Title</h5>
                                <p class="card-text">SKU: @product.Sku</p>
                                <p class="card-text">Price: @product.Price</p>
                                <button class="btn btn-primary" @onclick="() => AddToCart(product)">Add to Cart</button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

    </div>
    <div class="col">
    <div > 
        <CheckOutForm />
        <h3>Shopping Cart</h3>
        @if (ShoppingCartService.IsCartEmpty())
        {
            <p>Your cart is empty.</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>SKU</th>
                        <th>Title</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ShoppingCartService.GetCartItems())
                    {
                        <tr>
                            <td>@item.Product.Sku</td>
                            <td>@item.Product.Title</td>
                            <td>@item.Product.Price</td>
                            <td>@item.Quantity</td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="row">
            <div class="col">Total: @ShoppingCartService.GetTotalPrice()</div>
            </div>
        }
        </div>
    </div>
</div>
@code {
    private List<Product>? products; // declare a private nullable list of Product objects called "products"

    protected override async Task OnInitializedAsync() // define a protected override method called "OnInitializedAsync"
    {
        var products = await ProductService.GetProductsAsync(); // call a method named "GetProductsAsync" from a service named "ProductService" to retrieve a list of Product objects
        if (products != null) // if the list of products is not null
        {
            this.products = products.ToList(); // assign the list of products to the "products" field of the component as a new list
        }
    }

    private void AddToCart(Product product) // define a private method called "AddToCart" that takes a Product object as an argument
    {
        ShoppingCartService.AddItemToCart(product, 1); // call a method named "AddItemToCart" from a service named "ShoppingCartService" to add the specified product to a shopping cart with a quantity of 1
    }
}
